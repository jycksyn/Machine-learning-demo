[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Machine Learning Homework",
    "section": "",
    "text": "For this homework you will be training and testing a machine learning model that will be able to predict handwriting using the MNIST dataset.\n\n\nStep 1: Setup\n\nrun pip install -r requirements.txt\nGo to the file mnist.ipynb in nbs\nRun the first code block with the imports and make sure it is successful\n\n\n\nStep 2: Splitting the data\n\nNext we want to get the mnist dataset and split the data into a training and a testing set\nto do this, add the line (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data() to the next code block\nx_train & x_test: x_train and x_test are the mnist images themselves. They are represented as 28x28 2D arrays where each value is a number between 0, which represents the color white, and 255 which is black.\ny_train & y_test: The y values are the actual number that the image represents.\n\n\n\n\nIn this image, the y value is the label and the x value is the image\n\n\n\n\nStep 3: Visualize the data\n\nTo visualize the 2D array, use the function matplotlib library\nRun the function plotImage to plot the data\nChange the index to see different numbers and images that are in the dataset\n\n\n\nStep 4: Reshape the data\n\nThe neural network is expecting a 1D array, so we will need to reshape our data before we can train the model\nWe currently have a 28x28 2D matrix for every value in the dataset. We need to reshape each value to be a single array with a length of 784 containing all of the same values. \nTo do this we do the following  x_train_flat = x_train.reshape(NumberOfRows, NumberOfColumns)\nNumberOfRows: Represents the number of rows in the new array. For this dataset, the number of rows should be the length of x_train\nNumberOfColumns: Represents the number of elements we want to represent each image, or 784\nWe need to reshape both x_train and x_test.\nThe result will convert our array of 2D arrays we started with to an array of 1D arrays with the same values.\nYou should have an x_train_flat and an x_test_flat variable\n\n\n\nStep 5: Train the data\n\nIn the code, the model is already created for you, but you will need to train the model with the reshaped data\nIn order to train the model, run the line model.fit(x, y, epochs=5)\nx: The x value from the training data. In our case, the x should be x_train_flat\ny: The y value from the training data. We can just use y_train for this value\nepochs=5: Specifies the number of times the model will go through the entire training dataset through the training process. Leave this parameter as is\n\n\n\nStep 6: Test and Evaluate Data\n\nNow that the model is trained, we can use our test dataset to evaluate how our model performs\nTo test our model, add the line model.evaluate(x_test_flat, y_test) to the notebook in the provided block\nRunning this line, we get an accuracy around 90% which means our model is very accurate\nNow we can visualize the accuracy using a confusion matrix to see which numbers are more commonly misclassified.\nRun the confusion matrix function at the end of the notebook. It should look like this:\n\n\n\n\nThe y-axis represents the actual number that the image is supposed to be and the x-axis is what the model predicted the image in the number to be. For example, the model predicted 61 of the handwriting images to be a 9.\n\n\nAfter you produce this confusion matrix, push your code to github and email the link to (knguyen07@email.wm.edu)",
    "crumbs": [
      "Machine Learning Homework"
    ]
  },
  {
    "objectID": "mnist.html",
    "href": "mnist.html",
    "title": "Machine-learning-demo",
    "section": "",
    "text": "# Run this block and make sure it is successful.\nimport numpy as np  # used for handling mathematical operations easier in python\nimport tensorflow as tf  # used for creating and training machine learning models \nfrom tensorflow import keras # Keras contains the mnist dataset\nfrom matplotlib import pyplot as plt  # library that helps us visualize data by creating plots \nimport seaborn as sn # visualization library for creating more complex graphs\n\n2024-11-26 14:52:48.697917: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2024-11-26 14:52:48.701006: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2024-11-26 14:52:48.706801: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2024-11-26 14:52:48.725745: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1732650768.753111   23389 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1732650768.758511   23389 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2024-11-26 14:52:48.785817: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n\n\n\n\n(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n11490434/11490434 ━━━━━━━━━━━━━━━━━━━━ 2s 0us/step\n\n\n\ndef plotImage(index,x_train,x_test,y_train):\n    # Normalize the values so they are a decimal between 0 and 1\n    x_train = x_train/255\n    x_test = x_test/255\n    print(f'The plot represents the number {y_train[index]}')\n    plt.imshow(x_train[index],cmap = plt.cm.binary )\n    plt.show()\n\n\nplotImage(5,x_train,x_test,y_train)\n\nThe plot represents the number 2\n\n\n\n\n\n\n\n\n\n\nx_train_flat = x_train.reshape(len(x_train), 784)\nx_test_flat = x_train.reshape(len(x_train), 784)\n\n# x_train_flat = \n# x_test_flat =\n\n\n# Model creation\nmodel = keras.Sequential([\n    keras.layers.Dense(128, input_shape = (784,),activation='relu'), \n    keras.layers.Dense(64, activation='sigmoid'), \n    keras.layers.Dense(32, activation='sigmoid'), \n    keras.layers.Dense(10, activation='sigmoid')\n])\nmodel.compile (\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n)\n\n/home/jackson/anaconda3/envs/mlhw/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n2024-11-26 14:56:48.230635: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\n\n\n# TODO: Train the model using model.fit here\nmodel.fit(x_train_flat, y_train, epochs=5)\n\nEpoch 1/5\n1875/1875 ━━━━━━━━━━━━━━━━━━━━ 7s 3ms/step - accuracy: 0.6943 - loss: 1.1940\nEpoch 2/5\n1875/1875 ━━━━━━━━━━━━━━━━━━━━ 6s 3ms/step - accuracy: 0.9025 - loss: 0.3416\nEpoch 3/5\n1875/1875 ━━━━━━━━━━━━━━━━━━━━ 6s 3ms/step - accuracy: 0.9024 - loss: 0.3303\nEpoch 4/5\n1875/1875 ━━━━━━━━━━━━━━━━━━━━ 7s 4ms/step - accuracy: 0.9141 - loss: 0.2854\nEpoch 5/5\n1875/1875 ━━━━━━━━━━━━━━━━━━━━ 6s 3ms/step - accuracy: 0.9219 - loss: 0.2705\n\n\n&lt;keras.src.callbacks.history.History at 0x7ff27c754d00&gt;\n\n\n\nx_test_flat = x_test.reshape(len(x_test), 784)\nmodel.evaluate(x_test_flat, y_test)\n\n313/313 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.9064 - loss: 0.3217\n\n\n[0.28415748476982117, 0.9168999791145325]\n\n\n\n# TODO: Run the confusion matrix\ndef plot_confusion_matrix(model, x_test_flat, y_test):\n    # Make predictions\n    y_pred = model.predict(x_test_flat)\n    y_pred_labels = [np.argmax(i) for i in y_pred]\n    # Create confusion matrix\n    confusion_matrix = tf.math.confusion_matrix(labels=y_test, predictions=y_pred_labels)\n    # Plot the confusion matrix\n    plt.figure(figsize=(8, 6))\n    sn.heatmap(confusion_matrix, annot=True, fmt='d', cmap='Blues', cbar_kws={'label': 'Count'})\n    plt.title('Confusion Matrix')\n    plt.xlabel('Predicted Label')\n    plt.ylabel('True Label')\n    plt.show()\n\n# TODO: Uncomment out the line below and run the code block\nplot_confusion_matrix(model,x_test_flat,y_test)\n\n313/313 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step",
    "crumbs": [
      "mnist.html"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine-learning-demo",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "Machine-learning-demo"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "Machine-learning-demo",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall Machine_learning_demo in Development mode\n# make sure Machine_learning_demo package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to Machine_learning_demo\n$ nbdev_prepare",
    "crumbs": [
      "Machine-learning-demo"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Machine-learning-demo",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/lakebradford/Machine-learning-demo.git\nor from conda\n$ conda install -c lakebradford Machine_learning_demo\nor from pypi\n$ pip install Machine_learning_demo\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "Machine-learning-demo"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Machine-learning-demo",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "Machine-learning-demo"
    ]
  }
]